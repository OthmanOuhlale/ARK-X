// // const express = require('express');
// // const app = express();

// // app.get('/', (req, res)=>{
// //     res.send('Hello World!');
// // });

// // const port = 3000;
// // app.listen(port, ()=>{
// //     console.log('listening on port ' + port);
// // });

// -------------------------------------------------

// const express = require('express');
// const csurf = require('csurf');

// const app = express();

// // Enable CSRF protection middleware
// app.use(csurf({ cookie: true }));

// const users = [{"username": "test1", "email": "test1@gmail.com"},{"username": "test2", "email": "test2@gmail.com"}]

// // Update profile route
// app.post('/profile', (req, res) => {
//   // Validate CSRF token
//     if (req.csrfToken() !== req.body._csrf) {
//        return res.status(403).send('Invalid CSRF token');
//     }

//     // Process profile update
//     // ...

//     res.send('Profile updated successfully');
// });

// // Render form with CSRF token
// app.get('/profile', (req, res) => {
//     res.send(users);
//     // res.render('profile', { csrfToken: req.csrfToken() });
// });

// // Start the server
// app.listen(3000, () => {
//     console.log('Server is running on port 3000');
// });



// const express = require('express');
// const bodyParser = require('body-parser');
// const app = express();
// const PORT = 3000;

// // Middleware
// app.use(bodyParser.urlencoded({ extended: true }));

// // Sample user data (usually comes from a database)
// const users = [
//     { username: 'user1', password: 'password1' },
//     { username: 'user2', password: 'password2' }
// ];

// // Serve login form
// app.get('/', (req, res) => {
//     res.sendFile(__dirname + '/login.html');
// });

// // Handle login form submission
// app.post('/login', (req, res) => {
//     const { username, password } = req.body;
//     const user = users.find(u => u.username === username && u.password === password);
//     if (user) {
//         res.send('Login successful!');
//     } else {
//         res.send('Invalid username or password');
//     }
// });

// // Start the server
// app.listen(PORT, () => {
//     console.log(`Server is running on http://localhost:${PORT}`);
// });

// -------------------------------------------------

// const express = require('express');
// const sqlite3 = require('sqlite3').verbose();
// const bodyParser = require('body-parser');

// const app = express();
// const PORT = 3000;

// // Create and connect to a SQLite database
// const db = new sqlite3.Database(':memory:');
// db.serialize(() => {
//     db.run('CREATE TABLE users (id INTEGER PRIMARY KEY, username TEXT, password TEXT)');
//     db.run("INSERT INTO users (username, password) VALUES ('admin', 'admin123')");
//     db.run("INSERT INTO users (username, password) VALUES ('user', 'user123')");
// });

// // Middleware
// app.use(bodyParser.urlencoded({ extended: true }));

// // Serve login form
// app.get('/login', (req, res) => {
//     res.sendFile(__dirname + '/login.html');
// });


// // Route to authenticate users
// app.post('/login', (req, res) => {
//     const { username, password } = req.body;
//     const sql = `SELECT * FROM users WHERE username = ? AND password = ?`;
//     db.get(sql, [username, password], (err, row) => {
//         if (row) {
//             res.send(`Welcome, ${row.username}!`);
//         } else {
//             res.send('Invalid username or password');
//         }
//     });
// });

// app.listen(PORT, () => {
//     console.log(`Server is running on http://localhost:${PORT}`);
// });

// -------------------------------------------------

const express = require('express');
const bodyParser = require('body-parser');
const cookieParser = require('cookie-parser');
const session = require('express-session');
const app = express();

// Middleware
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.json());
app.use(cookieParser());
app.use(session({ secret: 'your-secret-key', resave: true, saveUninitialized: true }));

// Routes
app.get('/', (req, res) => {
    res.send('Welcome to the Sample Vulnerable Node.js Application');
});

app.get('/login', (req, res) => {
    res.send(`
        <h1>Login</h1>
        <form action="/login" method="POST">
            <input type="text" name="username" placeholder="Username" required><br>
            <input type="password" name="password" placeholder="Password" required><br>
            <button type="submit">Login</button>
        </form>
    `);
});

app.post('/login', (req, res) => {
    const { username, password } = req.body;
    // Authenticate user (vulnerable code for the challenge)
    if (username === 'admin' && password === 'password') {
        req.session.authenticated = true;
        req.session.username = username;
        res.redirect('/profile');
    } else {
        res.send('Invalid username or password');
    }
});

app.get('/profile', (req, res) => {
    if (req.session.authenticated) {
        res.send(`<h1>Welcome to your profile, ${req.session.username}</h1>`);
    } else {
        res.redirect('/login');
    }
});

// Server
app.listen(3000, () => {
    console.log('Server running on port 3000');
});
